#!/bin/bash

# N-gram Language Model Run Script
echo "
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                                                                ‚îÉ
‚îÉ   üîÆ N-gram Language Model Generator üîÆ                        ‚îÉ
‚îÉ                                                                ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
"

# Function to print section headers with emojis
print_section() {
    local emoji=$2
    if [ -z "$emoji" ]; then
        emoji="üîπ"  # Default emoji
    fi
    
    echo ""
    echo "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
    echo "‚îÉ $emoji  $1"
    echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
}

# Check for virtual environment
if [ ! -d ".venv" ] && [ ! -d "venv" ]; then
    print_section "Environment Check" "üîç"
    echo "‚ùå No virtual environment detected in the project root."
    echo "üí° Please run setup.sh first to set up the environment."
    
    echo ""
    echo "‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
    echo "‚îÉ                                                                ‚îÉ"
    echo "‚îÉ   üî¥ üî¥ üî¥  SETUP REQUIRED  üî¥ üî¥ üî¥                           ‚îÉ"
    echo "‚îÉ                                                                ‚îÉ"
    echo "‚îÉ   üöÄ Would you like to run setup.sh now?                       ‚îÉ"
    echo "‚îÉ                                                                ‚îÉ"
    echo "‚îÉ   ‚úÖ Press [ENTER] to run setup.sh                            ‚îÉ"
    echo "‚îÉ   ‚ùå Press any other key to exit                              ‚îÉ"
    echo "‚îÉ                                                                ‚îÉ"
    echo "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ"
    echo ""
    
    read -p "‚û§ " run_setup
    if [[ -z "$run_setup" || "$run_setup" == "y" || "$run_setup" == "Y" ]]; then
        echo "üöÄ Running setup.sh..."
        bash setup.sh
        exit 0
    else
        echo "‚ùå Exiting. Please run setup.sh before running this script."
        exit 1
    fi
else
    print_section "Environment Check" "‚úÖ"
    echo "üåü Virtual environment detected."
    
    # Activate the environment if not already activated
    if [ -z "$VIRTUAL_ENV" ]; then
        if [ -d ".venv" ]; then
            echo "üîå Activating virtual environment..."
            source .venv/bin/activate
        elif [ -d "venv" ]; then
            echo "üîå Activating virtual environment..."
            source venv/bin/activate
        fi
    else
        echo "‚ú® Virtual environment is already activated."
    fi
fi

# Check for training data
print_section "Data Check" "üìä"
if [ -z "$(ls -A data/gutenberg/*.txt 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è  Warning: No text files found in data/gutenberg directory."
    echo "üìù Please add some .txt files to data/gutenberg before proceeding."
    echo "‚ùå Exiting. Cannot continue without training data."
    exit 1
else
    echo "‚úÖ Training data found in data/gutenberg."
fi

# Ensure required directories exist
print_section "Directory Setup" "üìÅ"
mkdir -p data/gutenberg models output
echo "‚úÖ Required directories have been created."

# Run the training
print_section "Training Model" "üöÄ"
echo "üî• Training trigram model on Gutenberg data..."
echo "‚è≥ This may take a few moments depending on the data size."

# Display current settings
echo ""
echo "üìã Current settings from settings.py:"
python -c "
from src.config.settings import settings
print(f'   ‚Ä¢ N-gram Size: {settings.DEFAULT_NGRAM_SIZE}')
print(f'   ‚Ä¢ Default Tokens: {settings.DEFAULT_TOKENS}')
print(f'   ‚Ä¢ Top-K: {settings.DEFAULT_TOP_K}')
print(f'   ‚Ä¢ Top-P: {settings.DEFAULT_TOP_P}')
print(f'   ‚Ä¢ Temperature: {settings.DEFAULT_TEMPERATURE}')
print(f'   ‚Ä¢ Log Level: {settings.LOG_LEVEL}')
print(f'   ‚Ä¢ Smoothing: {settings.USE_SMOOTHING}')
print(f'   ‚Ä¢ Stupid Backoff: {settings.USE_STUPID_BACKOFF}')
"
if [ $? -ne 0 ]; then
    print_section "Process Failed" "‚ùå"
    echo "‚ùå Failed to load settings from settings.py"
    echo "üîç Please check if the settings file exists and is properly formatted."
    exit 1
fi
echo ""

# Train the model
python -m src.scripts.train gutenberg-model data/gutenberg
if [ $? -ne 0 ]; then
    print_section "Process Failed" "‚ùå"
    echo "‚ùå Model training failed with error code $?."
    echo "üîç Please check the error messages above for more information."
    exit 1
fi

# Check if training succeeded
if [ $? -eq 0 ]; then
    print_section "Text Generation" "‚ú®"
    echo "üé® Generating sample text using the trained model..."
    
    # Generate text with different settings
    echo "üìù Generating with default settings..."
    python -m src.scripts.generate gutenberg-model --tokens 50
    if [ $? -ne 0 ]; then
        print_section "Process Failed" "‚ùå"
        echo "‚ùå Text generation failed with error code $?."
        echo "üîç Please check the error messages above for more information."
        exit 1
    fi
    
    echo ""
    echo "üìù Generating with custom seed..."
    python -m src.scripts.generate gutenberg-model --tokens 50 --seed "The quick brown fox" --top-k 25
    if [ $? -ne 0 ]; then
        print_section "Process Failed" "‚ùå"
        echo "‚ùå Text generation with custom seed failed with error code $?."
        echo "üîç Please check the error messages above for more information."
        exit 1
    fi
    
    print_section "Process Complete" "üéâ"
    echo "üèÜ The n-gram language model has been trained and tested successfully!"
    echo ""
    echo "üìä You can find:"
    echo "   üíæ Trained model in: ./models/gutenberg-model.json"
    echo "   üìù Generated text samples above"
    echo ""
    
    print_section "Customization Guide" "‚öôÔ∏è"
    echo "There are two ways to customize the model behavior (command line arguments take precedence over settings):"
    echo ""
    echo "1Ô∏è‚É£  Default Settings in src/config/settings.py:"
    echo "   Model Configuration:"
    echo "   ‚Ä¢ DEFAULT_NGRAM_SIZE = 2      # Size of n-grams (2 for bigrams, 3 for trigrams, etc.)"
    echo "   ‚Ä¢ USE_SMOOTHING = True        # Enable Laplace smoothing for better handling of rare events"
    echo "   ‚Ä¢ USE_STUPID_BACKOFF = True   # Enable stupid backoff for unseen n-grams"
    echo "   ‚Ä¢ BACKOFF_ALPHA = 0.1         # Stupid backoff penalty factor"
    echo ""
    echo "   Generation Parameters:"
    echo "   ‚Ä¢ DEFAULT_TOKENS = 100        # Number of tokens to generate"
    echo "   ‚Ä¢ DEFAULT_TOP_K = 25          # Limit sampling to top K most likely tokens"
    echo "   ‚Ä¢ DEFAULT_TOP_P = None        # Nucleus sampling threshold (disabled by default)"
    echo "   ‚Ä¢ DEFAULT_TEMPERATURE = 1.0    # Temperature for controlling randomness"
    echo "                                  # < 1.0: more focused, conservative"
    echo "                                  # > 1.0: more diverse, creative"
    echo ""
    echo "   System Settings:"
    echo "   ‚Ä¢ LOG_LEVEL = 'INFO'          # Logging detail (DEBUG/INFO/WARNING/ERROR)"
    echo ""
    echo "2Ô∏è‚É£  Command Line Arguments (these override settings.py):"
    echo ""
    echo "üî∏ Training Arguments:"
    echo "   --n-gram-size INT    Size of n-grams"
    echo "   --smoothing          Enable Laplace smoothing"
    echo "   --no-smoothing       Disable Laplace smoothing"
    echo "   --stupid-backoff     Enable stupid backoff"
    echo "   --no-stupid-backoff  Disable stupid backoff"
    echo ""
    echo "üî∏ Generation Arguments:"
    echo "   --tokens INT         Number of tokens to generate"
    echo "   --seed TEXT         Starting text for generation"
    echo "   --top-k INT         Use top-k sampling"
    echo "   --top-p FLOAT       Use nucleus (top-p) sampling (default: disabled)"
    echo "   --temperature FLOAT Temperature for sampling"
    echo ""
    echo "üî∏ Training Examples:"
    echo "   ‚Ä¢ Train a 4-gram model with smoothing and stupid backoff:"
    echo "     uv run python -m src.scripts.train my-model data/gutenberg --n-gram-size 4 --smoothing --stupid-backoff"
    echo ""
    echo "   ‚Ä¢ Train without smoothing but with backoff:"
    echo "     uv run python -m src.scripts.train custom-model data/gutenberg --n-gram-size 3 --no-smoothing --stupid-backoff"
    echo ""
    echo "üî∏ Generation Examples:"
    echo "   ‚Ä¢ Basic generation with defaults:"
    echo "     uv run python -m src.scripts.generate gutenberg-model"
    echo ""
    echo "   ‚Ä¢ Generate longer text with seed:"
    echo "     uv run python -m src.scripts.generate gutenberg-model --tokens 200 --seed 'Once upon a time'"
    echo ""
    echo "   ‚Ä¢ Conservative generation (less random):"
    echo "     uv run python -m src.scripts.generate gutenberg-model --top-k 10 --temperature 0.7"
    echo ""
    echo "   ‚Ä¢ Creative generation (more random):"
    echo "     uv run python -m src.scripts.generate gutenberg-model --top-k 50 --temperature 1.2"
    echo ""
    echo "   ‚Ä¢ Advanced generation with all options:"
    echo "     uv run python -m src.scripts.generate gutenberg-model \\"
    echo "       --tokens 150 \\"
    echo "       --seed 'In the beginning' \\"
    echo "       --top-k 15 \\"
    echo "       --top-p 0.9 \\"
    echo "       --temperature 0.8"
else
    print_section "Process Failed" "‚ùå"
    echo "‚ùå The model training failed with error code $?."
    echo "üîç Please check the error messages above for more information."
    exit 1
fi

echo "
‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
‚îÉ                                                                ‚îÉ
‚îÉ                        ‚ú® FINISHED ‚ú®                          ‚îÉ
‚îÉ                                                                ‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ
" 